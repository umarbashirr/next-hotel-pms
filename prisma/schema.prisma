generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(cuid())
  email     String      @unique
  name      String?
  password  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  hotels    UserHotel[]
  accounts  Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Hotel {
  id             String             @id @default(cuid())
  name           String             @unique
  email          String?            @unique
  phone          String?
  address        Address?           @relation(fields: [addressId], references: [id])
  addressId      String?            @unique
  website        String?
  mapURL         String?
  ownerDetails   HotelOwnerDetails? @relation(fields: [ownerDetailsId], references: [id])
  ownerDetailsId String?            @unique
  gstDetails     GSTDetails?        @relation(fields: [gstDetailsId], references: [id])
  gstDetailsId   String?            @unique
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  users          UserHotel[]
  roomTypes      RoomType[]
  rooms          Room[]
}

model Address {
  id      String  @id @default(cuid())
  street  String?
  city    String?
  state   String?
  country String?
  zip     String?
  Hotel   Hotel?
}

model HotelOwnerDetails {
  id    String  @id @default(cuid())
  name  String?
  email String?
  phone String?
  Hotel Hotel?
}

model GSTDetails {
  id           String @id @default(cuid())
  beneficiary  String
  addressLine1 String
  addressLine2 String
  gstin        String
  state        String
  city         String
  pincode      String
  Hotel        Hotel?
}

model UserHotel {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  hotel     Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId   String
  role      Role     @default(FRONT_OFFICE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  FRONT_OFFICE
  ADMIN
  HOTEL_MANAGER
  BOT
}

model RoomType {
  id           String   @id @default(cuid())
  name         String
  roomTypeCode String
  description  String?
  Hotel        Hotel    @relation(fields: [hotelId], references: [id])
  hotelId      String   @unique
  price        Float
  checkInTime  String
  checkOutTime String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  rooms Room[]
}

model Room {
  id         String   @id @default(cuid())
  roomNumber String
  roomCode   String
  roomType   RoomType @relation(fields: [roomTypeId], references: [id])
  roomTypeId String
  hotel      Hotel    @relation(fields: [hotelId], references: [id])
  hotelId    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
